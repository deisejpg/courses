''' Set of functions written while taking Biology meets programming, Coursera, ~2017'''


"""This function takes a list of strings Motifs as input
	and returns the count matrix of Motifs (as a dictionary of lists)."""
def Count(Motifs):
    count = {} # initializing the count dictionary
    # your code here
    k = len(Motifs[0])
    for symbol in "ACGT":
        count[symbol] = []
        for j in range(k):
             count[symbol].append(0)
    t = len(Motifs)
    for i in range(t):
        for j in range(k):
            symbol = Motifs[i][j]
            count[symbol][j] += 1
    return count

"""This function is very similar to Count(Motifs). The difference is that Profile(Motifs)
	calculates frequence of the i-th nucleotide in the j-th column of the motif matrix.
	It basically divides the total number of of the count matrix by the number of rows."""
def Profile(Motifs):
    #t = the number of rows in Motifs
    #k = the length of the Motifs
    k = len(Motifs[0])
    t = len(Motifs)
    profile = {}
    # insert your code here
    k = len(Motifs[0])
    for symbol in "ACGT":
        profile[symbol] = []
        for j in range(k):
            profile[symbol].append(0)
    for i in range(t):
        for j in range(k):
            symbol = Motifs[i][j]
            profile[symbol][j] += float(1)/t
    return profile

"""This function takes a set of kmers Motifs as input and generates a consensus string of Motifs.
	It uses the function Count(Motifs) as subroutine."""
def Consensus(Motifs):
    # insert your code here
    k = len(Motifs[0])
    count = Count(Motifs)
    consensus = ""
    for j in range(k):
        m = 0
        frequentSymbol = ""
        for symbol in "ACGT":
            if count[symbol][j] > m:
                m = count[symbol][j]
                frequentSymbol = symbol
        consensus += frequentSymbol
    return consensus


"""This function takes a set of k-mers Motifs and generate the score of these k-mers.
    It uses the function Consensus(Motifs) as subroutine."""
def Score(Motifs):
    t = len(Motifs)
    k = len(Motifs[0])
    score = 0
    score_matrix = [0]*k
    consensus = Consensus(Motifs)
    for i in range(t):
        for j in range(k):
            if not Motifs[i][j] == consensus[j]:
                score_matrix[j] +=1
    for i in range(len(score_matrix)):
        score += score_matrix[i]
    return score


"""This function takes a string Text and a profile matrix Profile and generates the probability of
    Text given the probability values in Profile."""
def Pr(Text, Profile):
    # insert your code here
    # text refers to the sequence of interes
    # profile refers to the probability of recoverinb a given nucleotide
    p = 1
    for index in range(0, len(Text)):
        p = p * Profile[Text[index]][index]
    return p


"""This function calculates the probability of every k-mer k in a string text given the k-mer that was most likely
    generated by Profile among all k-mers in Text. 
    It uses the function Pr(Text, Profile) as a subroutine."""
def ProfileMostProbableKmer(text, k, Profile):
    n = len(text)
    pr = {}
    most_prob_kmer = []
    for i in range(n-k+1):
        kmer = text[i:i+k]
        probability = Pr(kmer, Profile)
        pr[kmer] = probability
    m = max(pr.values())
    for key, value in pr.items():
        if pr[key] == m:
            most_prob_kmer.append(key)
    return most_prob_kmer[0]


""" """
def ProfileMostProbablePattern(text,k,profile):
    p=-1
    result=text[0:k]
    for i in range(len(text)-k+1):
        seq=text[i:i+k]
        pr=Pr(seq,profile)
        if pr>p:
            p=pr
            result=seq
    return result

""" """
def GreedyMotifSearch(Dna, k, t):
    # type your GreedyMotifSearch code here.
    BestMotifs = []
    for i in range(0, t):
        BestMotifs.append(Dna[i][0:k])
    n = len(Dna[0])
    for i in range(n-k+1):
        Motifs = []
        Motifs.append(Dna[0][i:i+k])
        for j in range(1, t):
            P = Profile(Motifs[0:j])
            Motifs.append(ProfileMostProbablePattern(Dna[j], k, P))
        if Score(Motifs) < Score(BestMotifs):
            BestMotifs = Motifs
    return BestMotifs


"""A function that takes a list of strings Motifs as input and returns the count matrix
     of Motifs with pseudocounts as a dictionary of lists."""
# Input:  A set of kmers Motifs
# Output: CountWithPseudocounts(Motifs)
def CountWithPseudocounts(Motifs):
    #k = the length of the Motifs
    #t = the number of rows in Motifs
    count = {} # initializing the count dictionary
    k = len(Motifs[0])    
    for symbol in "ACGT":
        count[symbol] = []
        for j in range(k):
             count[symbol].append(1)
    t = len(Motifs)     
    for i in range(t):
        for j in range(k):
            symbol = Motifs[i][j]
            count[symbol][j] += 1
    return count      



"""This function is similar to CountWithPseudocounts(Motifs). This function takes a list of strings Motifs
    as input and returns the profile matrix of Motifs with pseudocounts as a dictionary of lists. It uses
    CountWithPseudocounts(Motifs) as a subroutine."""
#def ProfileWithPseudocounts(Motifs):
